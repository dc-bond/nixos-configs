# ensure ansible installed on provisioning machine
# create bootable USB from downloaded ISO using 'dd bs=4M if=/path/to/file.iso of=/dev/sd[x] status=progress oflag=sync'
# boot live ISO on target machine
# securely erase install drive with 'sudo shred --verbose --random-source=/dev/urandom -n1 --zero /dev/sd[drive letter]'
# set root user password on live ISO system to 'root' by running 'sudo passwd' as default nixos user so ansible can login as root on the target machine
# install python into the live ISO with 'sudo nix-env -iA nixos.python3Minimal'
# install git into the live ISO with 'sudo nix-env -iA nixos.git'
# check live ISO system IP address with 'ip a' then ensure inventory.yml updated accordingly
# run with 'ansible-playbook base-install.yml -i inventory.yml' while inside ansible project directory on provisioning machine

---
- hosts: thinkpad
  
  vars:

    ansible_user: root # user on live ISO system that ansible logs in as for purpose of ansible-orchestrated base system install onto empty drive
    ansible_ssh_pass: root # root user passwd on live ISO system
    ansible_ssh_common_args: -o "StrictHostKeyChecking no" -o "UserKnownHostsFile /dev/null"
    ansible_python_interpreter: /nix/var/nix/profiles/default/bin/python # location of python path in live ISO system after installing with 'sudo nix-env -iA nixos.python3Minimal'
    ## virtual machine
    #install_drive: /dev/sda
    #boot_partition_suffix: "1"
    #root_partition_suffix: "2"
    ##wired_interface: enp0s3
    # thinkpad laptop
    install_drive: /dev/nvme0n1
    boot_partition_suffix: "p1"
    root_partition_suffix: "p2"
    #wired_interface: enp0s31f6
    #wireless_interface: wlan0

  tasks:

    - name: load encrypted variables # sops requires gpg key on machine running ansible to decrypt secrets file (also requires yubikey to unlock gpg key)
      community.sops.load_vars:
        file: ../secrets.yaml

    - name: abort if the host is not booted from the nixos install media
      fail:
        msg: "This host is not booted from the nixos install media!"
      when: ansible_nodename != 'nixos'

    - name: wipe install drive and all its partitions
      ansible.builtin.command: find /dev -wholename "{{ install_drive }}*" -exec wipefs --force --all {} \;

    - name: create boot partition
      parted:
        device: "{{ install_drive }}"
        label: gpt
        number: 1
        part_end: 1024MB
        name: boot
        flags: [boot, esp]
        state: present

    - name: create root partition
      parted:
        device: "{{ install_drive }}"
        label: gpt
        number: 2
        part_start: 1024MB
        name: root
        flags: [lvm]
        state: present

    - name: encrypt root partition
      community.crypto.luks_device:
        device: "{{ install_drive }}{{ root_partition_suffix }}"
        state: "opened"
        name: cryptroot
        type: luks2
        passphrase: "{{ crypt-passwd }}"

    - name: create FAT32 filesystem in boot partition
      filesystem:
        dev: "{{ install_drive }}{{ boot_partition_suffix }}"
        fstype: vfat
        opts: -F 32 -n boot
        force: yes

    - name: create ext4 filesystem in root volume
      filesystem:
        dev: "/dev/mapper/cryptroot"
        fstype: ext4
        opts: -L cryptroot
        force: yes
        
    - name: mount cryptroot filesystem
      ansible.builtin.command: mount /dev/disk/by-label/cryptroot /mnt
    
    - name: create mountpoint for boot volume
      file:
        path: /mnt/boot
        state: directory

    - name: mount boot filesystem
      ansible.builtin.command: mount /dev/disk/by-label/boot /mnt/boot

    - name: create swapfile
      #ansible.builtin.command: dd if=/dev/zero of=/mnt/.swapfile bs=1K count=2M status=progress # for virtual machine testing
      ansible.builtin.command: dd if=/dev/zero of=/mnt/.swapfile bs=1K count=16M status=progress # for thinkpad production

    - name: set permissions on swap file
      ansible.builtin.file:
        path: /mnt/.swapfile
        mode: 0600

    - name: format swap file
      ansible.builtin.command: mkswap /mnt/.swapfile

    - name: turn on swap
      ansible.builtin.command: swapon /mnt/.swapfile

#    - name: run installation
#      ansible.builtin.command: nixos-install --no-root-passwd --no-write-lock-file --flake github:dc-bond/nixos-configs#thinkpad
#      args:
#        chdir: /mnt

#    - name: clone repository
#      ansible.builtin.git:
#        repo: https://github.com/dc-bond/nixos-configs.git
#        dest: /mnt/nixos-configs
#        clone: yes
#        update: yes
#
#    - name: run installation
#      ansible.builtin.command: nixos-install --no-root-passwd --flake .#thinkpad
#      args:
#        chdir: /mnt/nixos-configs

#    - name: shutdown
#      shell: /run/current-system/sw/bin/shutdown now

# login ssh as user
# clone repo (using github ssh url) into home directory as user
# reboot
# sops machine key update
# git clone pass repo
# firefox manual setup
# vscode manual extension setup