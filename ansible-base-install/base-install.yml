# ensure ansible installed on provisioning machine
# git clone git@github.com:dc-bond/nixos-configs.git to ansible machine
# ensure gpg private key installed on provisioning machine (restore .gnupg from git clone)
# update ansible.cfg file with location of ssh private key (restore .ssh from git clone)
# update inventory with ip address of target machine
# boot live ISO on target machine
# set root password on live ISO system to 'root' by running 'passwd' so ansible can ling via ssh
# install python into the live ISO with sudo nix-env -iA nixos.python3Minimal before running playbook
# run with 'ansible-playbook base-install.yml -i inventory.yml' while inside directory

---
- hosts: t490
  
  vars:

    ansible_user: root # user on live ISO system that ansible logs in as for purpose of ansible-orchestrated base system install onto empty drive
    ansible_ssh_pass: root # root user passwd on live ISO system
    ansible_become_user: chris
    ansible_ssh_common_args: -o "StrictHostKeyChecking no" -o "UserKnownHostsFile /dev/null"
    ansible_python_interpreter: /nix/var/nix/profiles/default/bin/python # location of python path after installing into the live ISO system with 'sudo nix-env -iA nixos.python3Minimal'
    # virtual machine
    install_drive: /dev/sda
    boot_partition_suffix: "1"
    root_partition_suffix: "2"
    wired_interface: enp0s3
    # t490 laptop
    #install_drive: /dev/nvme0n1
    #boot_partition_suffix: "p1"
    #root_partition_suffix: "p2"
    #wired_interface: enp0s31f6
    #wireless_interface: wlan0

  tasks:

    - name: load encrypted variables # sops requires gpg key on machine running ansible to decrypt secrets file (also requires yubikey to unlock gpg key)
      community.sops.load_vars:
        file: secrets.sops.yml

    - name: abort if the host is not booted from the nixos install media
      fail:
        msg: "This host is not booted from the nixos install media!"
      when: ansible_nodename != 'nixos'

    - name: wipe install drive and all its partitions
      ansible.builtin.command: find /dev -wholename "{{ install_drive }}*" -exec wipefs --force --all {} \;

    - name: create boot partition
      parted:
        device: "{{ install_drive }}"
        label: gpt
        number: 1
        part_end: 1024MB
        name: boot
        flags: [boot, esp]
        state: present

    - name: create root partition
      parted:
        device: "{{ install_drive }}"
        label: gpt
        number: 2
        part_start: 1024MB
        name: root
        flags: [lvm]
        state: present

    - name: encrypt root partition
      community.crypto.luks_device:
        device: "{{ install_drive }}{{ root_partition_suffix }}"
        state: "opened"
        name: cryptroot
        type: luks2
        passphrase: "{{ passwd }}"

    - name: create FAT32 filesystem in boot partition
      filesystem:
        dev: "{{ install_drive }}{{ boot_partition_suffix }}"
        fstype: vfat
        opts: -F 32 -n boot
        force: yes

    - name: create ext4 filesystem in root volume
      filesystem:
        dev: "/dev/mapper/cryptroot"
        fstype: ext4
        opts: -L cryptroot
        force: yes
        
    - name: mount cryptroot filesystem
      ansible.builtin.command: mount /dev/disk/by-label/cryptroot /mnt
    
    - name: create mountpoint for boot volume
      file:
        path: /mnt/boot
        state: directory

    - name: mount boot filesystem
      ansible.builtin.command: mount /dev/disk/by-label/boot /mnt/boot

    - name: create swapfile
      ansible.builtin.command: dd if=/dev/zero of=/mnt/.swapfile bs=1M count=2k status=progress

    - name: set permissions on swap file
      ansible.builtin.file:
        path: /mnt/.swapfile
        mode: 0600

    - name: format swap file
      ansible.builtin.command: mkswap /mnt/.swapfile

    - name: turn on swap
      ansible.builtin.command: swapon /mnt/.swapfile

#    - name: generate configuration files
#      ansible.builtin.command: nixos-generate-config --root /mnt
#
#    - name: remove default configuration.nix file
#      ansible.builtin.command: find /mnt/etc/nixos/ -type f -iname 'configuration.nix' -delete

    - name: create /etc/nixos directory
      ansible.builtin.file:
        path: /mnt/etc/nixos
        group: root
        owner: root
        state: directory
        mode: 0644
    
    - name: deploy custom hardware-configuration.nix file
      ansible.builtin.template:
        dest: "/mnt/etc/nixos/hardware-configuration.nix"
        src: hardware-configuration.nix.j2
        group: root
        owner: root
        mode: 0644

    - name: deploy custom configuration.nix file
      ansible.builtin.template:
        dest: "/mnt/etc/nixos/configuration.nix"
        src: configuration.nix.j2
        group: root
        owner: root
        mode: 0644

    - name: run installation
      ansible.builtin.command: nixos-install --no-root-passwd
      args:
        chdir: /mnt

#    - name: add home manager channel at user level
#      ansible.builtin.command: "nix-channel --add https://github.com/nix-community/home-manager/archive/release-23.11.tar.gz home-manager"
#      args:
#        chdir: /mnt
#      become: true
#      become_user: "{{ ansible_become_user }}"
#
#    - name: update channel at user level
#      ansible.builtin.command: "nix-channel --update"
#      args:
#        chdir: /mnt
#      become: true
#      become_user: "{{ ansible_become_user }}"
#
#    - name: install home-manager at user level
#      ansible.builtin.command: "nix-shell '<home-manager>' -A install"
#      args:
#        chdir: /mnt
#      become: true
#      become_user: "{{ ansible_become_user }}"


    #- name: shutdown
    #  shell: /run/current-system/sw/bin/shutdown now

# login to new system with chris user
# change passwd with 'passwd' command
# add home manager channel with 'nix-channel --add https://github.com/nix-community/home-manager/archive/release-23.11.tar.gz home-manager'
# update channel with 'nix-channel --update'
# logout and back in
# install home manager with 'nix-shell '<home-manager>' -A install'
# get ssh private key onto machine
# clone repo
# replace home.nix
# update configs